name: Scrape V2Nodes and Update configs.txt

on:
  push:
    paths:
      - 'v2ray_mining.py'
      - '.github/workflows/**'
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  scrape-and-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 python-v2ray

      - name: Cache binaries
        uses: actions/cache@v3
        with:
          path: |
            vendor/
            core_engine/
          key: ${{ runner.os }}-binaries-${{ hashFiles('**/v2ray_mining.py') }}
          restore-keys: |
            ${{ runner.os }}-binaries-

      - name: Setup binaries
        run: |
          set -e
          echo "PWD: $(pwd)"
          
          # Create directories if they don't exist
          mkdir -p vendor core_engine
          
          # Check if binaries already exist
          echo "Checking existing binaries..."
          echo "Vendor contents:"
          ls -la vendor/ || echo "vendor/ directory empty or not accessible"
          echo "Core engine contents:"
          ls -la core_engine/ || echo "core_engine/ directory empty or not accessible"
          
          # Download binaries using the python script
          echo "Downloading binaries..."
          python -c "import sys; import traceback; from pathlib import Path; from python_v2ray.downloader import BinaryDownloader; try: downloader = BinaryDownloader(Path('.')); downloader.ensure_all(); print('Binaries downloaded successfully'); except Exception as e: print(f'Error downloading binaries: {e}'); traceback.print_exc(); # Continue anyway, as the script has fallback mechanisms; pass"
          
          # Make binaries executable
          echo "Making binaries executable..."
          find vendor/ -type f -name '*.exe' -exec chmod +x {} \; 2>/dev/null || echo "No .exe files in vendor/"
          find core_engine/ -type f -name '*.exe' -exec chmod +x {} \; 2>/dev/null || echo "No .exe files in core_engine/"
          find vendor/ -type f -name 'xray*' -exec chmod +x {} \; 2>/dev/null || echo "No xray files in vendor/"
          find core_engine/ -type f -name 'core_engine*' -exec chmod +x {} \; 2>/dev/null || echo "No core_engine files in core_engine/"
          
          # Ensure tester executable exists with the correct name for Linux
          echo "Setting up tester executable with correct name for Linux..."
          if [ -f "vendor/core_engine_linux" ]; then
            cp vendor/core_engine_linux core_engine/core_engine_linux
            chmod +x core_engine/core_engine_linux
            echo "Copied vendor/core_engine_linux to core_engine/core_engine_linux"
          elif [ -f "vendor/core_engine" ]; then
            cp vendor/core_engine core_engine/core_engine_linux
            chmod +x core_engine/core_engine_linux
            echo "Copied vendor/core_engine to core_engine/core_engine_linux"
          elif [ -f "core_engine/core_engine" ]; then
            cp core_engine/core_engine core_engine/core_engine_linux
            chmod +x core_engine/core_engine_linux
            echo "Copied core_engine/core_engine to core_engine/core_engine_linux"
          else
            echo "No core_engine binary found, will rely on script to handle it"
          fi
          
          # Final verification
          echo "Final directory contents:"
          echo "Vendor:"
          ls -la vendor/ || echo "vendor/ directory empty or not accessible"
          echo "Core engine:"
          ls -la core_engine/ || echo "core_engine/ directory empty or not accessible"

      - name: Run scraper
        run: |
          python v2ray_mining.py
        shell: bash
        continue-on-error: true

      - name: Show results (for logs)
        run: |
          echo "Configs file size: $(wc -l < configs.txt) lines"
          echo "First 10 configs:"
          head -10 configs.txt
        shell: bash

      - name: Commit and push if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add configs.txt || true
          if ! git diff --quiet --staged; then
            git commit -m "chore(scrape): update configs.txt ($(date '+%Y-%m-%d %H:%M'))"
            git push
            echo "Pushed changes."
          else
            echo "No changes to commit."
          fi
        shell: bash